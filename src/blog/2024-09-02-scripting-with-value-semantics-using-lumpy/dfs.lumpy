# dfs.lumpy - depth first search implemented in Lumpy

let node = {
    "new": function(name) {
        let self = {"name": name, "children": set{}};
        setmeta(self.&, node);
        return self;
    },
    "string": function(value) {
        return value.name;
    },
};

let graph = {
    "new": function(nodes) {
        let self = {"nodes": nodes};
        setmeta(self.&, graph);
        return self;
    },
};

let dfs = function(graph) {
    let visited = set{};
    let ordered = [];

    let visit = function(node) {
        if visited.contains(node) {
            return;
        }
        visited.insert(node);
        for child in node.*.children {
            visit(child);
        }
        ordered.insert(0, node.*);
    };

    for node in graph.nodes {
        visit(node);
    }
    return ordered;
};

# B-->E-->A--+
# |   |   |  |
# |   v   |  |
# +-->C<--+  |
#      |     v
#      +---->D

let a = node::new("A");
let b = node::new("B");
let c = node::new("C");
let d = node::new("D");
let e = node::new("E");

a.children.insert(c.&);
a.children.insert(d.&);

b.children.insert(c.&);
b.children.insert(e.&);

c.children.insert(d.&);

e.children.insert(a.&);
e.children.insert(c.&);

let ordered = dfs(graph::new({a.&, b.&, c.&, d.&, e.&}));
println("Ordered:");
for x in ordered {
    println(x);
}
