# merge-sort-version-2.sunder
import "std";

func merge_sort[[T]](a: []T) void {
    if countof(a) <= 1 {
        return;
    }

    var a0 = std::slice[[T]]::new(countof(a)/2);
    var a1 = std::slice[[T]]::new(countof(a) - countof(a)/2);
    defer {
        std::slice[[T]]::delete(a0);
        std::slice[[T]]::delete(a1);
    }
    std::slice[[T]]::copy(a0, a[0:countof(a)/2]);
    std::slice[[T]]::copy(a1, a[countof(a)/2:countof(a)]);

    merge_sort[[T]](a0);
    merge_sort[[T]](a1);

    var i0 = 0u;
    var i1 = 0u;
    for i in countof(a) {
        if i0 == countof(a0) {
            a[i] = a1[i1];
            i1 = i1 + 1;
        }
        elif i1 == countof(a1) {
            a[i] = a0[i0];
            i0 = i0 + 1;
        }
        elif std::compare[[T]](&a0[i0], &a1[i1]) < 0 {
            a[i] = a0[i0];
            i0 = i0 + 1;
        }
        else {
            a[i] = a1[i1];
            i1 = i1 + 1;
        }
    }
}

func display[[T]](slice: []T) void {
    std::print(std::out(), "[");
    for i in countof(slice) {
        if i != 0 {
            std::print(std::out(), ", ");
        }
        std::print_format(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[T]](&slice[i])]);
    }
    std::print_line(std::out(), "]");
}

func main() void {
    var slice = (:[]ssize)[4, 8, 5, 3, 1, 6, 2, 7];
    display[[ssize]](slice);
    merge_sort[[ssize]](slice);
    display[[ssize]](slice);

    var slice = (:[][]byte)["banana", "carrot", "apple"];
    display[[[]byte]](slice);
    merge_sort[[[]byte]](slice);
    display[[[]byte]](slice);
}
